// Export utilities for analysis sharing and PDF generation

export const copyToClipboard = async (text) => {
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(text);
      return true;
    } else {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      const result = document.execCommand('copy');
      textArea.remove();
      return result;
    }
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
};

export const generateAnalysisSummary = (text, analysis, suggestedReplies = null) => {
  const date = new Date().toLocaleDateString();
  const time = new Date().toLocaleTimeString();
  
  let summary = `üì± TEXT MESSAGE ANALYSIS REPORT\n`;
  summary += `Generated: ${date} at ${time}\n`;
  summary += `\n${'='.repeat(50)}\n\n`;
  
  // Overall Assessment
  summary += `üîç OVERALL ASSESSMENT\n`;
  summary += `-`.repeat(25) + `\n`;
  summary += `Status: ${analysis.status || 'Unknown'}\n`;
  summary += `Explanation: ${analysis.explanation || 'No explanation provided'}\n\n`;
  
  // Metrics
  if (analysis.metrics && analysis.metrics.length > 0) {
    summary += `üìä RELATIONSHIP METRICS\n`;
    summary += `-`.repeat(25) + `\n`;
    analysis.metrics.forEach(metric => {
      const bars = '‚ñà'.repeat(Math.floor(metric.score / 10));
      const spaces = '‚ñë'.repeat(10 - Math.floor(metric.score / 10));
      summary += `${metric.metric}: ${metric.score}% [${bars}${spaces}]\n`;
    });
    summary += `\n`;
  }
  
  // Green Flags
  if (analysis.greenFlags && analysis.greenFlags.length > 0) {
    summary += `üíö GREEN FLAGS (${analysis.greenFlags.length})\n`;
    summary += `-`.repeat(25) + `\n`;
    analysis.greenFlags.forEach((flag, index) => {
      summary += `${index + 1}. "${flag.quote}"\n`;
      summary += `   Why it's positive: ${flag.explanation}\n\n`;
    });
  }
  
  // Red Flags
  if (analysis.redFlags && analysis.redFlags.length > 0) {
    summary += `üö© RED FLAGS (${analysis.redFlags.length})\n`;
    summary += `-`.repeat(25) + `\n`;
    analysis.redFlags.forEach((flag, index) => {
      summary += `${index + 1}. "${flag.quote}"\n`;
      summary += `   Why it's concerning: ${flag.explanation}\n\n`;
    });
  }
  
  // Reply Suggestions
  if (suggestedReplies && suggestedReplies.length > 0) {
    summary += `üí¨ SUGGESTED REPLIES\n`;
    summary += `-`.repeat(25) + `\n`;
    suggestedReplies.forEach((reply, index) => {
      summary += `${index + 1}. ${reply.type} Approach:\n`;
      summary += `   "${reply.text}"\n`;
      summary += `   Strategy: ${reply.rationale}\n\n`;
    });
  }
  
  // Original Conversation
  summary += `üìù ORIGINAL CONVERSATION\n`;
  summary += `-`.repeat(25) + `\n`;
  summary += text;
  summary += `\n\n${'='.repeat(50)}\n`;
  summary += `Generated by Text Message Reality Check\n`;
  summary += `Visit: whosyashvardhan.com\n`;
  
  return summary;
};

export const downloadAsText = (content, filename) => {
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const shareAsImage = async (elementId) => {
  try {
    // This would require html2canvas library - for now we'll use a simpler approach
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('Element not found');
    }

    // Create a temporary canvas approach
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    // Simple text-based image generation
    const text = element.innerText;
    const lines = text.split('\n');
    
    canvas.width = 800;
    canvas.height = Math.max(600, lines.length * 25 + 100);
    
    // Background
    ctx.fillStyle = '#1f2937';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Text
    ctx.fillStyle = '#f3f4f6';
    ctx.font = '14px Inter, sans-serif';
    
    lines.forEach((line, index) => {
      ctx.fillText(line.substring(0, 80), 20, 40 + (index * 20));
    });
    
    // Convert to blob and download
    canvas.toBlob((blob) => {
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `text-analysis-${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    });
    
    return true;
  } catch (error) {
    console.error('Failed to generate image:', error);
    return false;
  }
};

export const generatePDFContent = (text, analysis, suggestedReplies = null) => {
  // Generate HTML content for PDF
  const date = new Date().toLocaleDateString();
  const time = new Date().toLocaleTimeString();
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Text Message Analysis Report</title>
      <style>
        body {
          font-family: 'Inter', Arial, sans-serif;
          line-height: 1.6;
          margin: 40px;
          color: #333;
          background: white;
        }
        .header {
          text-align: center;
          border-bottom: 3px solid #8b5cf6;
          padding-bottom: 20px;
          margin-bottom: 30px;
        }
        .title {
          font-size: 24px;
          font-weight: bold;
          color: #8b5cf6;
          margin-bottom: 10px;
        }
        .subtitle {
          color: #666;
          font-size: 14px;
        }
        .section {
          margin-bottom: 30px;
          page-break-inside: avoid;
        }
        .section-title {
          font-size: 18px;
          font-weight: bold;
          color: #374151;
          border-left: 4px solid #8b5cf6;
          padding-left: 15px;
          margin-bottom: 15px;
        }
        .status-box {
          background: #f8fafc;
          border: 2px solid #e2e8f0;
          border-radius: 8px;
          padding: 20px;
          margin-bottom: 20px;
        }
        .status-title {
          font-weight: bold;
          font-size: 16px;
          color: #1e293b;
          margin-bottom: 10px;
        }
        .metric {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 10px;
          padding: 8px 0;
          border-bottom: 1px solid #e2e8f0;
        }
        .metric-bar {
          width: 200px;
          height: 8px;
          background: #e2e8f0;
          border-radius: 4px;
          overflow: hidden;
        }
        .metric-fill {
          height: 100%;
          background: #8b5cf6;
          transition: width 0.3s ease;
        }
        .flag {
          background: #f8fafc;
          border-left: 4px solid;
          padding: 15px;
          margin-bottom: 15px;
          border-radius: 0 8px 8px 0;
        }
        .flag.green {
          border-color: #10b981;
          background: #ecfdf5;
        }
        .flag.red {
          border-color: #ef4444;
          background: #fef2f2;
        }
        .flag-quote {
          font-style: italic;
          font-weight: bold;
          margin-bottom: 8px;
        }
        .flag-explanation {
          font-size: 14px;
          color: #6b7280;
        }
        .reply {
          background: #f8fafc;
          border: 1px solid #e2e8f0;
          border-radius: 8px;
          padding: 15px;
          margin-bottom: 15px;
        }
        .reply-type {
          font-weight: bold;
          color: #8b5cf6;
          margin-bottom: 8px;
        }
        .reply-text {
          font-style: italic;
          margin-bottom: 8px;
        }
        .reply-rationale {
          font-size: 14px;
          color: #6b7280;
        }
        .conversation {
          background: #f9fafb;
          border: 1px solid #e5e7eb;
          border-radius: 8px;
          padding: 20px;
          white-space: pre-wrap;
          font-family: monospace;
          font-size: 12px;
          line-height: 1.4;
        }
        .footer {
          margin-top: 40px;
          padding-top: 20px;
          border-top: 1px solid #e2e8f0;
          text-align: center;
          color: #6b7280;
          font-size: 12px;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="title">üì± Text Message Analysis Report</div>
        <div class="subtitle">Generated on ${date} at ${time}</div>
      </div>

      <div class="section">
        <div class="section-title">üîç Overall Assessment</div>
        <div class="status-box">
          <div class="status-title">${analysis.status || 'Unknown Status'}</div>
          <div>${analysis.explanation || 'No explanation provided'}</div>
        </div>
      </div>

      ${analysis.metrics && analysis.metrics.length > 0 ? `
      <div class="section">
        <div class="section-title">üìä Relationship Metrics</div>
        ${analysis.metrics.map(metric => `
          <div class="metric">
            <span>${metric.metric}</span>
            <div style="display: flex; align-items: center; gap: 10px;">
              <div class="metric-bar">
                <div class="metric-fill" style="width: ${metric.score}%"></div>
              </div>
              <span>${metric.score}%</span>
            </div>
          </div>
        `).join('')}
      </div>
      ` : ''}

      ${analysis.greenFlags && analysis.greenFlags.length > 0 ? `
      <div class="section">
        <div class="section-title">üíö Green Flags (${analysis.greenFlags.length})</div>
        ${analysis.greenFlags.map(flag => `
          <div class="flag green">
            <div class="flag-quote">"${flag.quote}"</div>
            <div class="flag-explanation">Why it's positive: ${flag.explanation}</div>
          </div>
        `).join('')}
      </div>
      ` : ''}

      ${analysis.redFlags && analysis.redFlags.length > 0 ? `
      <div class="section">
        <div class="section-title">üö© Red Flags (${analysis.redFlags.length})</div>
        ${analysis.redFlags.map(flag => `
          <div class="flag red">
            <div class="flag-quote">"${flag.quote}"</div>
            <div class="flag-explanation">Why it's concerning: ${flag.explanation}</div>
          </div>
        `).join('')}
      </div>
      ` : ''}

      ${suggestedReplies && suggestedReplies.length > 0 ? `
      <div class="section">
        <div class="section-title">üí¨ Suggested Replies</div>
        ${suggestedReplies.map(reply => `
          <div class="reply">
            <div class="reply-type">${reply.type} Approach</div>
            <div class="reply-text">"${reply.text}"</div>
            <div class="reply-rationale">Strategy: ${reply.rationale}</div>
          </div>
        `).join('')}
      </div>
      ` : ''}

      <div class="section">
        <div class="section-title">üìù Original Conversation</div>
        <div class="conversation">${text}</div>
      </div>

      <div class="footer">
        Generated by Text Message Reality Check<br>
        Visit: whosyashvardhan.com
      </div>
    </body>
    </html>
  `;
};

export const downloadAsPDF = (text, analysis, suggestedReplies = null) => {
  const htmlContent = generatePDFContent(text, analysis, suggestedReplies);
  const blob = new Blob([htmlContent], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `text-analysis-${Date.now()}.html`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const shareViaWebAPI = async (text, analysis) => {
  if (navigator.share) {
    try {
      const summary = generateAnalysisSummary(text, analysis);
      await navigator.share({
        title: 'Text Message Analysis',
        text: summary.substring(0, 500) + '...',
        url: window.location.href
      });
      return true;
    } catch (error) {
      console.error('Share failed:', error);
      return false;
    }
  }
  return false;
};
